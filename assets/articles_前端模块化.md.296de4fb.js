import{_ as s,o as a,c as n,M as l}from"./chunks/framework.21809aeb.js";const A=JSON.parse('{"title":"前端模块化","description":"","frontmatter":{},"headers":[],"relativePath":"articles/前端模块化.md"}'),p={name:"articles/前端模块化.md"},o=l(`<h1 id="前端模块化" tabindex="-1">前端模块化 <a class="header-anchor" href="#前端模块化" aria-label="Permalink to &quot;前端模块化&quot;">​</a></h1><h2 id="前端为什么会需要模块化" tabindex="-1">前端为什么会需要模块化 <a class="header-anchor" href="#前端为什么会需要模块化" aria-label="Permalink to &quot;前端为什么会需要模块化&quot;">​</a></h2><p>在JavaScript发展初期就是为了实现简单的页面交互逻辑，而如今CPU、浏览器性能得到了极大的提升，很多页面逻辑迁移到了客户端（表单验证等），随着web2.0时代的到来，Ajax技术得到广泛应用，jQuery等前端库层出不穷，前端代码日益膨胀，此时在JS方面就会考虑使用模块化规范去管理。模块化已经发展了有十余年了，不同的工具和轮子层出不穷，但总结起来，它们解决的问题主要有三个：</p><ol><li>外部模块的管理；</li><li>内部模块的组织；</li><li>模块源码到目标代码的编译和转换；</li></ol><p>以下为各个工具或者框架的诞生时间，先了解下时间节奏，方便对内容有所了解：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">生态             诞生时间</span></span>
<span class="line"><span style="color:#BABED8;"> Node.js          </span><span style="color:#F78C6C;">2009</span><span style="color:#BABED8;">年   </span></span>
<span class="line"><span style="color:#BABED8;"> NPM              </span><span style="color:#F78C6C;">2010</span><span style="color:#BABED8;">年   </span></span>
<span class="line"><span style="color:#BABED8;"> requireJS(AMD)   </span><span style="color:#F78C6C;">2010</span><span style="color:#BABED8;">年</span></span>
<span class="line"><span style="color:#BABED8;"> seaJS(CMD)       </span><span style="color:#F78C6C;">2011</span><span style="color:#BABED8;">年</span></span>
<span class="line"><span style="color:#BABED8;"> broswerify       </span><span style="color:#F78C6C;">2011</span><span style="color:#BABED8;">年</span></span>
<span class="line"><span style="color:#BABED8;"> webpack          </span><span style="color:#F78C6C;">2012</span><span style="color:#BABED8;">年</span></span>
<span class="line"><span style="color:#BABED8;"> grunt            </span><span style="color:#F78C6C;">2012</span><span style="color:#BABED8;">年 </span></span>
<span class="line"><span style="color:#BABED8;"> gulp             </span><span style="color:#F78C6C;">2013</span><span style="color:#BABED8;">年</span></span>
<span class="line"><span style="color:#BABED8;"> react            </span><span style="color:#F78C6C;">2013</span><span style="color:#BABED8;">年 </span></span>
<span class="line"><span style="color:#BABED8;"> vue              </span><span style="color:#F78C6C;">2014</span><span style="color:#BABED8;">年</span></span>
<span class="line"><span style="color:#BABED8;"> angular          </span><span style="color:#F78C6C;">2016</span><span style="color:#BABED8;">年</span></span>
<span class="line"><span style="color:#BABED8;"> redux            </span><span style="color:#F78C6C;">2015</span><span style="color:#BABED8;">年 </span></span>
<span class="line"><span style="color:#BABED8;"> vite             </span><span style="color:#F78C6C;">2020</span><span style="color:#BABED8;">年</span></span>
<span class="line"><span style="color:#BABED8;"> snowpack         </span><span style="color:#F78C6C;">2020</span><span style="color:#BABED8;">年</span></span></code></pre></div><h3 id="什么是模块" tabindex="-1">什么是模块？ <a class="header-anchor" href="#什么是模块" aria-label="Permalink to &quot;什么是模块？&quot;">​</a></h3><p>● 将一个复杂的程序依据一定的规则(规范)封装成几个块(文件)，并进行组合在一起； ● 块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信；</p><h2 id="模块化的进程" tabindex="-1">模块化的进程 <a class="header-anchor" href="#模块化的进程" aria-label="Permalink to &quot;模块化的进程&quot;">​</a></h2><h3 id="全局function模式" tabindex="-1">全局function模式 <a class="header-anchor" href="#全局function模式" aria-label="Permalink to &quot;全局function模式&quot;">​</a></h3><p>将不同的功能封装成不同的全局函数 ● 编码：将不同的功能封装成不同的全局函数 ● 问题：污染全局命名空间, 容易引起命名冲突或数据不安全，而且模块成员之间看不出直接关系</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">m1</span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">m2</span><span style="color:#89DDFF;">(){}</span></span></code></pre></div><h3 id="namespace方式" tabindex="-1">namespace方式 <a class="header-anchor" href="#namespace方式" aria-label="Permalink to &quot;namespace方式&quot;">​</a></h3><p>简单对象封装 ● 作用：减少了全局变量，解决命名冲突 ● 问题：数据不安全(外部可以直接修改模块内部的数据)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> myModule </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">www.baidu.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">foo() </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">bar() </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">myModule</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">other data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">//能直接修改模块内部的数据</span></span>
<span class="line"><span style="color:#BABED8;">myModule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// foo() other data</span></span></code></pre></div><h3 id="iife模式" tabindex="-1">IIFE模式 <a class="header-anchor" href="#iife模式" aria-label="Permalink to &quot;IIFE模式&quot;">​</a></h3><p>匿名函数自调用(闭包) ● 作用：数据是私有的, 外部只能通过暴露的方法操作 ● 编码：将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口 ● 问题：如果当前这个模块依赖另一个模块怎么办?</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// index.html文件</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    myModule.foo()</span></span>
<span class="line"><span style="color:#BABED8;">    myModule.bar()</span></span>
<span class="line"><span style="color:#BABED8;">    console.log(myModule.data) //undefined 不能访问模块内部数据</span></span>
<span class="line"><span style="color:#BABED8;">    myModule.data = &#39;xxxx&#39; //不是修改的模块内部的data</span></span>
<span class="line"><span style="color:#BABED8;">    myModule.foo() //没有改变</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// module.js文件</span></span>
<span class="line"><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">window</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test myModule</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//操作数据的函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//用于暴露有函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">foo() </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//用于暴露有函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">bar() </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">otherFun</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">//内部调用</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">otherFun</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//内部私有的函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">otherFun()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//暴露行为</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">myModule</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">bar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//ES6写法</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)(window)</span></span></code></pre></div><p>最后得到的结果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#BABED8;">() test myModule</span></span>
<span class="line"><span style="color:#82AAFF;">bar</span><span style="color:#BABED8;">() test myModule</span></span>
<span class="line"><span style="color:#82AAFF;">otehrFun</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#BABED8;">() test myModule</span></span></code></pre></div><h3 id="iife增强模式" tabindex="-1">IIFE增强模式 <a class="header-anchor" href="#iife增强模式" aria-label="Permalink to &quot;IIFE增强模式&quot;">​</a></h3><p>这就是现代模块实现的基石</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// module.js文件</span></span>
<span class="line"><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">$</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">www.baidu.com</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">//操作数据的函数</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">//用于暴露有函数</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">foo() </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#82AAFF;">$</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">body</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">css</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">background</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">//用于暴露有函数</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">bar() </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#82AAFF;">otherFun</span><span style="color:#F07178;">() </span><span style="color:#676E95;font-style:italic;">//内部调用</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">otherFun</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">//内部私有的函数</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">otherFun()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">//暴露行为</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">myModule</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">bar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)(window</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> jQuery)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index.html文件</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#BABED8;"> 引入的js必须有一定顺序 </span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jquery-1.10.1.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;"> myModule.foo()</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>上例子通过jquery方法将页面的背景颜色改成红色，所以必须先引入jQuery库，就把这个库当作参数传入。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。</p><h3 id="模块化的好处" tabindex="-1">模块化的好处 <a class="header-anchor" href="#模块化的好处" aria-label="Permalink to &quot;模块化的好处&quot;">​</a></h3><p>● 避免命名冲突(减少命名空间污染)<br> ● 更好的分离, 按需加载<br> ● 更高复用性<br> ● 高可维护性</p><h3 id="引入多个script引发的问题" tabindex="-1">引入多个script引发的问题 <a class="header-anchor" href="#引入多个script引发的问题" aria-label="Permalink to &quot;引入多个script引发的问题&quot;">​</a></h3><p>● 请求过多<br> 首先我们要依赖多个模块，那样就会发送多个请求，导致请求过多<br> ● 依赖模糊<br> 我们不知道他们的具体依赖关系是什么，也就是说很容易因为不了解他们之间的依赖关系导致加载先后顺序出错<br> ● 难以维护<br> 以上两种原因就导致了很难维护，很可能出现牵一发而动全身的情况导致项目出现严重的问题。<br> 模块化固然有多个好处，然而一个页面需要引入多个js文件，就会出现以上这些问题。而这些问题可以通过模块化规范来解决，因此才有了后续的commonjs, AMD, ES6, CMD规范。</p>`,28),e=[o];function t(c,r,y,F,D,i){return a(),n("div",null,e)}const E=s(p,[["render",t]]);export{A as __pageData,E as default};
